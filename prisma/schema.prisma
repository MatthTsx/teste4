datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Jogador1      Game[]    @relation("1")
  Jogador2      Game[]    @relation("2")
  wins          Int       @default(0)
  loses         Int       @default(0)
}

model Game {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  full    Boolean
  user1   User?   @relation("1", fields: [userId], references: [id])
  userId  String? @db.ObjectId
  user2   User?   @relation("2", fields: [user2Id], references: [id])
  user2Id String? @db.ObjectId
  Ganho   Boolean @default(false)
  P1_Turn String?

  Board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String @db.ObjectId
}

model Pieces {
  id     String    @id @default(auto()) @map("_id") @db.ObjectId
  pieces Boolean[] @default([true, true, true, true, true])

  Board1   Board?  @relation(fields: [board1Id], references: [id], onDelete: Cascade)
  board1Id String? @db.ObjectId
}

model Board {
  id    String   @id @default(auto()) @map("_id") @db.ObjectId
  Board String[] @default(["0", "0", "0", "0", "0", "0", "0", "0", "0"])

  P_Pieces Pieces[]
  Game     Game[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  id         String   @id @default(auto()) @map("_id") @db.ObjectId

  @@unique([identifier, token])
}
